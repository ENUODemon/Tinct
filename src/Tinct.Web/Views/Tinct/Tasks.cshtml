
@{
    ViewData["Title"] = "Tasks";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Tasks</h2>

<div class="form-inline">
    <div style="float:right" class="form-group">
        <input type="button" class="btn btn-default" value="Search" onclick="searchTasks(document.getElementsByName('searchContent')[0].value)" />
    </div>
    <div style="float:right" class="form-group">
        <input type="text" class="form-control" name="searchContent" />
    </div>
    <div style="float:right" class="form-group">
        <select class="selectpicker" name="sleTaskStatus" style="height:31px">
            <option value="0">ALL</option>
            <option value="1">Waitting</option>
            <option value="2">WaittingToRun</option>
            <option value="3">Running</option>
            <option value="4">Completed</option>
        </select>
    </div>
    <div style="float:right" class="form-group">
        <label for="inputTaskStatus" class="control-label" style="margin-top:5px;font-size:15px">TaskStatus</label>
    </div>
    <div style="float:right" class="form-group">
        <input type="submit" class="btn btn-default" value="Refresh" />
    </div>
</div>
<table class="table table-striped" name="tasksTable">
    <tr>
        <th>
            ID
        </th>
        <th onclick='tasksPage(pagesize, pageindex,currenttasks, "Name", this)'>
            Name
        </th>
        <th onclick='tasksPage(pagesize, pageindex,currenttasks, "DllName", this)'>
            DllName
        </th>
        <th onclick='tasksPage(pagesize, pageindex,currenttasks, "NamespaceName", this)'>
            NamespaceName
        </th>
        <th onclick='tasksPage(pagesize, pageindex,currenttasks, "ClassName", this)'>
            ClassName
        </th>
        <th onclick='tasksPage(pagesize, pageindex,currenttasks, "MethodName", this)'>
            MethodName
        </th>
        <th onclick='tasksPage(pagesize, pageindex,currenttasks, "TargetNodeName", this)'>
            TargetNodeName
        </th>
        <th onclick='tasksPage(pagesize, pageindex,currenttasks, "Status", this)'>
            Status
        </th>
        <th onclick='tasksPage(pagesize, pageindex,currenttasks, "CreateTime", this)'>
            CreateTime
        </th>
        <th onclick='tasksPage(pagesize, pageindex,currenttasks, "ExcuteTime", this)'>
            ExcuteTime
        </th>
        <th onclick='tasksPage(pagesize, pageindex,currenttasks, "EndTime", this)'>
            EndTime
        </th>
    </tr>
</table>
<nav>
    <ul class="pager" style="text-align:right">
        <li>
            <input class="form-control" id="page" value="1" type="text" style="display:inline;width:4%" name="pageindex" />
        </li>
        <li>
            <a onclick="goPage()">Go</a>
        </li>
        <li><a onclick="prev()">Previous</a></li>
        <li><a onclick="next()">Next</a></li>

    </ul>
</nav>
<input type="hidden" value='@Html.Raw(ViewBag.Tasks)' name="taskInfoLists" />
<input type="hidden" value="@Html.Raw(ViewBag.PageSize)" name="pagesize" />
<script type="text/javascript">

    var tasks = JSON.parse(document.getElementsByName("taskInfoLists")[0].value);
    var currenttasks = tasks;
    var pageindex = 1;
    var pagesize = parseInt(document.getElementsByName("pagesize")[0].value);

    var by = function (name, sortDirection) {
        return function (a, b) {
            if (sortDirection == "asc") {

                if (typeof a[name] == 'number')
                {
                    return a[name] - b[name]
                }
                return a[name].localeCompare(b[name]);
            }
            else if (sortDirection == "desc") {
                if (typeof a[name] == 'number')
                {
                    return b[name] - a[name]
                }

                return b[name].localeCompare(a[name]);
            }
        }
    }

    function goPage() {
        pageindex = document.getElementsByName("pageindex")[0].value;
        tasksPage(pagesize, page, currenttasks);
    }

    function prev() {
        if (pageindex > 1) {
            pageindex--;
        }

        tasksPage(pagesize, pageindex, currenttasks);
        document.getElementsByName("pageindex")[0].value = pageindex;
    }
    function next() {
        pageindex++;
        tasksPage(pagesize, pageindex, currenttasks);
        document.getElementsByName("pageindex")[0].value = pageindex;
    }

    function searchTasks(textcontent) {
        if (textcontent == "" || textcontent == undefined) {
            return;
        }
        var filtervalue = $(document.getElementsByName("sleTaskStatus")[0]).val();
        var filetertasks = new Array();
        var i = 0;
        switch (filtervalue) {
            case "0": filetertasks = tasks; break;
            case "1": $.each(tasks, function (k, v) {
                if (
                    v.Status.toLowerCase().indexOf('waitting') != -1
                ) {
                    filetertasks[i++] = v;
                }
            }); break;
            case "2": $.each(tasks, function (k, v) {
                if (
                    v.Status.toLowerCase().indexOf('waittingtorun') != -1
                ) {
                    filetertasks[i++] = v;
                }
            }); break;
            case "3":
                $.each(tasks, function (k, v) {
                    if (
                        v.Status.toLowerCase().indexOf('running') != -1
                    ) {
                        filetertasks[i++] = v;
                    }
                });
                break;
            case "4":
                $.each(tasks, function (k, v) {
                    if (
                        v.Status.toLowerCase().indexOf('completed') != -1
                    ) {
                        filetertasks[i++] = v;
                    }
                });
                break;
        }


        var j = 0;


        var temptasks = new Array();

        $.each(filetertasks, function (k, v) {
            if (
                v.ID.toLowerCase().indexOf(textcontent.toLowerCase()) != -1
                || v.Name.toLowerCase().indexOf(textcontent.toLowerCase()) != -1
                || v.DllName.toLowerCase().indexOf(textcontent.toLowerCase()) != -1
                || v.ClassName.toLowerCase().indexOf(textcontent.toLowerCase()) != -1
                || v.NamespaceName.toLowerCase().indexOf(textcontent.toLowerCase()) != -1
                || v.MethodName.toLowerCase().indexOf(textcontent.toLowerCase()) != -1) {
                temptasks[j++] = v;
            }
        });
        currenttasks = temptasks;
        tasksPage(pagesize, pageindex, currenttasks);

    }

    function tasksPage(pagesize, pageindex, tasks, sortName, object) {
        if (object != undefined) {
            if (object.sortDirection == undefined) {
                object.sortDirection = "asc";
            }
            else if (object.sortDirection == "asc") {
                object.sortDirection = "desc";
            }
            else if (object.sortDirection == "desc") {
                object.sortDirection = "asc";
            }

            tasks = tasks.sort(by(sortName, object.sortDirection))
        }
        var pagetasks = tasks.slice(pagesize * (pageindex - 1), pagesize * pageindex);
        $(document.getElementsByName("taskinfo")).remove();
        var table = document.getElementsByName("tasksTable")[0];
        $.each(pagetasks, function f(k, v) {
            var ele = $('<tr name="taskinfo"></tr>');
            ele.append('<td>' + v.ID + '</td>');
            ele.append('<td>' + v.Name + '</td>');
            ele.append('<td>' + v.DllName + '</td>');
            ele.append('<td>' + v.NamespaceName + '</td>');
            ele.append('<td>' + v.ClassName + '</td>');
            ele.append('<td>' + v.MethodName + '</td>');
            ele.append('<td>' + v.TargetNodeName + '</td>');
            ele.append('<td>' + v.Status + '</td>');
            ele.append('<td>' + new Date(v.CreateTime).toLocaleString() + '</td>');
            ele.append('<td>' + new Date(v.StartTime).toLocaleString() + '</td>');
            ele.append('<td>' + new Date(v.EndTime).toLocaleString()+ '</td>');
            $(table).append(ele);
        });


    }

    window.onload = function () { tasksPage(pagesize, pageindex, currenttasks); };

</script>